/*
The MIT License (MIT)

Copyright (c) 2014 Joy Biswas

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/*********************************************************************************************************************
* jquery.zfakeselect.plugin
* Description: Makes IE select dropdowns usable in a shrinked environment
* - When you have a 100px space for a dropdown and you know that some of your options are more than that, your IE cuts out your options, where as FF renders them 
*   smooth. This jQuery plugin lets you create dropdowns like FF in IE.
* 
* ->Sample calls<- 
*		$('select').zFakeSel();
*		$('.selectDrop').zFakeSel({selectWidth:100,optionWidth:250});
*		$('#select1').zFakeSel({browser:true});
*		$('select').zFakeSel({selectWidth:200,optionWidth:400,scrollEnable:150});
*		$('select').zFakeSel({optionWidth:400,cfakeCombo:{background:'red'},cfakeSelHover:{'background':'cyan'}});
*
*/
(function($){
	$.fn.zFakeSel = function(override){
		var defaults = {
			 'selectWidth'	:100
							//width assigned to the select element
			,'optionWidth'	:10
							//width assigned to the select options combo box (if width is smaller than option max will override by run time max)
			,'scrollEnable'	:300
							//scroll enabled if height reaches this value
			,'browser'		:document.all
							 //browser check to run on browser (currently set to run for IE only) - note document.all > true (if ie) | false (if anything else)
			,'fontsize'		:6.8
							//each char size to consume
			,'scrollEffect'	:'#document'
							//the scrolling element to close the fakeselect
			,'cfakeCombo'	:{'border':'2px outset #000000','overflow':'hidden','padding':'0px 1px 0px 0px','border-width':'1px 1px 1px 1px','background':'#FFF','margin':'0px','position':'absolute'}
							//css for the combo dropdown box
			,'cfakeSel'		:{'background':'#FFF','text-align':'left','color':'#000','width':'auto','padding':'0px 1px','cursor':'default','border':'1px dotted #FFF','border-width':'1px 0px','margin':'0px'}
							//css Class for the option tags in fake combo(css class pushed to head)
			,'cfakeSelHover':{'background':'#000066','color':'#FFF !important','cursor':'default'}
							//css class for the option tags in fake combo (onmouseover) - (css class pushed to head)
			,'randClassId'	:Math.floor((Math.random()*9999999)+1)
							//random id attached to a css rule for more than one fake select obj in page
		};
		
		//Extend CSS
		override.cfakeCombo 	= $.extend(defaults.cfakeCombo,override.cfakeCombo);//The Combo Box
		override.cfakeSel 		= $.extend(defaults.cfakeSel,override.cfakeSel);//The option box
		override.cfakeSelHover 	= $.extend(defaults.cfakeSelHover,override.cfakeSelHover);//The Option box on hover
		
		//Extending-overriding options
		var p = $.extend(defaults,override);
		
		//jQuery chaining
		return this.each(function(){
			//original select El
			var sel = $(this).width(p.selectWidth);
			
			//browser implementation
			if(!p.browser){
				return true;
			}
			sel.hover(function(event){
				$('#wp_'+p.randClassId).show().css({margin:getcssCompositeProp(this,'margin'),padding:getcssCompositeProp(this,'padding'),left:$(this).offset().left,top:$(this).offset().top,width:$(this).width(),height:$(this).height()+2});
			});

			//span wrapper makes unclickable
			var wrap = sel.after('<span id="wp_'+p.randClassId+'" ref="'+sel.attr('id')+'" class=selectWrpSpn></span>').next();
			wrap.css({margin:getcssCompositeProp(sel,'margin'),padding:getcssCompositeProp(sel,'padding'),left:sel.offset().left,top:sel.offset().top,width:sel.width(),height:sel.height()+2,opacity:0,position:'absolute',background:'#ccc'});
			wrap.mouseout(function(event){$(this).hide();});
			
			//close fake select box on click
			$(document).on('mousedown', function (e) {
				var t = $(e.target);
				if(t.hasClass('selectWrpSpn') && t.attr('ref') == $('#fakeSel').attr('ref')){
					t.attr({'status':'open'});
					return true;
				}
				if (t.closest("#fakeSel").length === 0) {
					$("#fakeSel").remove();
				}
			});
			$(p.scrollEffect?p.scrollEffect:window).on('scroll', function (e) {
				if ($(e.target).closest("#fakeSel").length === 0) {$("#fakeSel").remove();}
			});
			//push CSS to head
			throwOutCSS([['p.cfakeSel', p.cfakeSel], ['p.cfakeSelHover', p.cfakeSelHover]], p.randClassId);
			
			//define the clcik event on select dropdown(when the span wrapperer is clicked)
			wrap.click(function(event){
				//the fake select dropdown combo box
				var fakeSel = $('#fakeSel');
				
				if(fakeSel.length>0 && $(this).attr('status')=='open'){
					fakeSel.remove();
					return false;
				}
				
				//option tags
				var opts = sel.children(),opt;
				
				//create a combo fake box
				sel.after('<div id=fakeSel ref="'+sel.attr('id')+'"></div>');
				
				//create options using p tag inside fake combo box
				var nOpts = '';
				opts.each(function(){
					opt = $(this);nOpts += '<p class="cfakeSel'+p.randClassId+(opt.is(':selected')?(' cfakeSelHover'+p.randClassId):'')+'">'+(opt.text().trim()==""?'&nbsp;':opt.text().trim())+'</p>';
				});
				nOpts = $(nOpts);//make jquery objects of options
				
				//add events to options
				nOpts.hover(function(){$(this).siblings().removeClass('cfakeSelHover'+p.randClassId);$(this).toggleClass('cfakeSelHover'+p.randClassId)});
				nOpts.click(function(){sel.prop('selectedIndex',$(this).index()).trigger('change');fakeSel.remove();});
				
				//append opts to combo
				fakeSel = $('#fakeSel').append(nOpts);
				
				//get Absolute Position of the original select dropdown
				var pos = getPosition(sel.get(0));
				
				//cal max height = <each opt> * <count opts> || <max scroll height>
				var maxOptHgt = (fakeSel.find('p').get(0).clientHeight+2) * opts.length;
				maxOptHgt = maxOptHgt>p.scrollEnable ? p.scrollEnable : maxOptHgt;
				
				//calculate if scroll is enabled (required to increase combobox width to accomodate scrollbar and create overflow
				var scrollEnable = maxOptHgt==p.scrollEnable;
				
				//calculate max width if each opt width > supplied width than max of opt width + 30px for scroll
				/*var maxOptWidth = fakeSel.find('p').max(function() {return $(this).text().trim().length; }) * p.fontsize;//8 as fontsiz default
				maxOptWidth = Math.floor((maxOptWidth>p.optionWidth)?maxOptWidth:p.optionWidth + (scrollEnable?30:0));
				*/
				var tW = p.selectWidth;
				sel.width('auto');
				var maxOptWidth = sel.get(0).clientWidth + (scrollEnable?30:0);
				sel.width(tW);
				
				//combo box css for showoff + css for absolute position 
				fakeSel.css(p.cfakeCombo).css({width:maxOptWidth,height:maxOptHgt,left:pos.x,top:(sel.height()+$(sel).offset().top+2),'overflow-y':(scrollEnable?'scroll':'hidden'),'margin':sel.css('margin')});
				
				//return event to reach document
				event.stopPropagation();
			});
		});
	};
	
	//Helper Functions
	
	//return max of jquery array selectors
	$.fn.max = function(selector) { 
		return Math.max.apply(null, this.map(function(index, el) { return selector.apply(el); }).get() ); 
	}
	
	//Add Css-defs to browser
	function throwOutCSS(rules,rndId){
		//rules : [[<element>.<class>],[<cssObj>],[<elm>.<class>],[<cssObj>]...]
		var cssRl = '', tmp,cssObj;
		for(var i=0;i<rules.length;i++){
			cssObj=rules[i][1],tmp='';
			$.each(cssObj, function(key,value) {
				tmp += key+':'+value+';';
			});
			cssRl += rules[i][0]+rndId+'{'+tmp+'}';
		}
		$('<style type="text/css">'+cssRl+'</style>').appendTo('head');
	}
	//getComposite Prop
	function getcssCompositeProp(el,prp){
		el = $(el);
		return el.css(prp+'Top')+' '+el.css(prp+'Right')+' '+el.css(prp+'Bottom')+' '+el.css(prp+'Left');
	}
	
	//get absolute positioning of any El in DOM
	function getPosition (el) {
		var p = { x: el.offsetLeft, y: el.offsetTop };
		while (el.offsetParent) {
			el = el.offsetParent;
			p.x += el.offsetLeft;
			p.y += el.offsetTop;
			if (el != document.body && el != document.documentElement) {
				p.x -= el.scrollLeft;
				p.y -= el.scrollTop;
			}
		}
		p.y = p.y;
		return p;//alert(p.x+'|'+p.y);
	}
})(jQuery);
